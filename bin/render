#!/usr/bin/env bash

FILE_PATTERN_SET=false
OUTPUT_FILE_SET=false
GIF=false

function help() {
  echo "Usage: render [ARGS ...] file_pattern output.ext"
  echo
  echo "ARGS:"
  echo " --loop            Loop input indefinitely until another condition stops it."
  echo " --length=TIME     The maxmimum length. TIME is formatted as hh:mm:ss[.xxx]."
  echo " --input-fps=FPS   FPS of the input files."
  echo " --output-fps=FPS  FPS of the output file."
  echo " --fps=FPS         FPS of input and output files."
  echo "                   Overrides --input-fps and --output-fps"
  echo " --gif             Force output to be treated as GIF."
  echo "                   Default is to check the file extension."
  echo " --help            This."
  echo
  echo
  echo "TODO: Clean up the following part of help()."
  echo
  echo "file_pattern is a pattern to match the input file(s). Uses ffmpeg's format."
  echo "output.ext is the output file to save to."
  exit $1
}

if [ "${#@}" = "0" ]; then  
  help 1
fi

for ((i=1;i<=${#@};i++)); do
  ARG="${@:$i:1}"
  VAL="$(echo $ARG | cut -d '=' -f 2)"

  case "$ARG" in
#  --loop=*)
#    LOOP=$VAL
#    ;;
  --loop)
    LOOP=1
    ;;
  --length=*)
    LENGTH=$VAL
    ;;
  --input-fps=*)
    IN_FPS=$VAL
    ;;
  --output-fps=*)
    OUT_FPS=$VAL
    ;;
  --fps=*)
    FPS=$VAL
    ;;
  --gif)
    GIF=true
    ;;
  --help|-help|-h)
    help
    ;;
  -*)
    echo "Unknown flag: $(echo $ARG | cut -d '=' -f 1)"
    ;;
  *)
    if ! $FILE_PATTERN_SET; then
      FILE_PATTERN_SET=true
      FILE_PATTERN="$ARG"
    elif ! $OUTPUT_FILE_SET; then
      OUTPUT_FILE_SET=true
      OUTPUT_FILE="$ARG"
    else
      echo "Unexpected argument: $ARG"
      echo
      help $1
    fi
    ;;
  esac
done

echo "Loop:    $LOOP"
echo "Length:  $LENGTH"
echo "IN_FPS:  $IN_FPS"
echo "OUT_FPS: $OUT_FPS"
echo "FPS:     $FPS"
echo "Input:   $FILE_PATTERN"
echo "Output:  $OUTPUT_FILE"

# --fps should only be used if input and output have the same FPS, hence the warnings.
if [ -n "$FPS" ]; then
  [ -n "$IN_FPS" ] || [ -n "$OUT_FPS" ] && echo "WARNING: The --fps flag should only be used if the input and output have the same FPS."
  [ -n "$IN_FPS"  ] && echo "WARNING: Overriding input FPS of $IN_FPS (--input-fps) with $FPS (--fps)"
  [ -n "$OUT_FPS" ] && echo "WARNING: Overriding output FPS of $OUT_FPS (--output-fps) with $FPS (--fps)"

  IN_FPS=$FPS
  OUT_FPS=$FPS
fi

[ -n "$LOOP"    ] && LOOP="-loop $LOOP"
[ -n "$LENGTH"  ] && LENGTH="-t $LENGTH"
[ -n "$IN_FPS"  ] && IN_FPS="-r $IN_FPS"
[ -n "$OUT_FPS" ] && OUT_FPS="-r $OUT_FPS"

if [ "$(echo $OUTPUT_FILE | sed 's/.*\(\..*\)/\1/')" == ".gif" ]; then
  GIF=true
fi

if $GIF; then
  MISC_OUT_ARGS="$MISC_OUT_ARGS -pix_fmt rgb24"
fi

ffmpeg $LOOP $LENGTH $IN_FPS -qscale 1 -f image2 -i $FILE_PATTERN -y $MISC_OUT_ARGS $OUT_FPS $OUTPUT_FILE

